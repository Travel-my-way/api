name: Docker publishing

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Run tests
        run: |
          echo "There should be tests !"

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    # if: github.event_name == 'push'

    strategy:
      matrix:
        # component: [api, broker, worker]
        component: [api]

    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v2

      - name: Set Image tag
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo VERSION=$VERSION
          echo "VERSION=${VERSION}" >> $GITHUB_ENV


      - name: Kaniko build
        uses: aevea/action-kaniko@master
        with:
          registry: docker.pkg.github.com
          password: ${{ secrets.GITHUB_TOKEN }}
          image: bonvoyage-${{ matrix.component }}
          tag: ${{ env.VERSION }}
          cache: true
          cache_registry: cache
          build_file: ./${{ matrix.component }}/Dockerfile


      # - name: Push image
      #   run: |
      #     IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

      #     # Change all uppercase to lowercase
      #     IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

      #     # Strip git ref prefix from version
      #     VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

      #     # Strip "v" prefix from tag name
      #     [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

      #     # Use Docker `latest` tag convention
      #     [ "$VERSION" == "master" ] && VERSION=latest

      #     echo IMAGE_ID=$IMAGE_ID
      #     echo VERSION=$VERSION

      #     docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
      #     docker push $IMAGE_ID:$VERSION
